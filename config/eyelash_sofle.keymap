#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp GRAVE   &kp N1        &kp N2        &kp N3            &kp N4  &kp N5       &trans  &kp N6     &kp N7  &kp N8             &kp N9         &kp N0         &kp BACKSPACE
&kp TAB     &kp Q         &kp W         &kp E             &kp R   &kp T        &trans  &kp Y      &kp U   &kp I              &kp O          &kp P          &kp BSLH
&kp ESCAPE  &kp A         &kp S         &kp D             &kp F   &kp G        &trans  &kp H      &kp J   &kp K              &kp L          &kp SEMI       &kp APOS
&kp LSHFT   &kp Z         &kp X         &kp C             &kp V   &kp B        &trans  &kp N      &kp M   &kp COMMA          &kp DOT        &kp FSLH       &kp RIGHT_SHIFT
&trans      &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_CONTROL  &mo 1   &kp SPACE    &trans  &kp ENTER  &mo 2   &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_WIN
            >;

            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&trans     &trans     &trans            &trans        &trans             &trans           &trans  &trans           &trans        &trans        &trans        &trans        &kp DELETE
&trans     &trans     &kp LC(LEFT)      &kp UP_ARROW  &kp LC(RIGHT)      &kp HOME         &trans  &kp END          &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp KP_EQUAL  &trans
&trans     &trans     &kp LEFT          &kp DOWN      &kp RIGHT          &kp PLUS         &trans  &kp MINUS        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans        &trans
&kp LC(C)  &kp LC(V)  &kp LS(LC(LEFT))  &kp LC(X)     &kp LS(LC(RIGHT))  &kp KP_DIVIDE    &trans  &kp KP_MULTIPLY  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &trans
&trans     &trans     &trans            &trans        &trans             &trans           &trans  &trans           &trans        &trans        &kp NUMBER_0  &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&trans  &kp F1    &kp F2       &kp F3    &kp F4      &kp F5         &trans  &kp F6     &kp F7            &kp F8             &kp F9                &kp F10                &kp F11
&trans  &trans    &trans       &trans    &trans      &trans         &trans  &trans     &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans                &trans                 &kp F12
&trans  &kp EXCL  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &trans  &kp CARET  &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans    &trans       &trans    &trans      &trans         &trans  &trans     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans                &trans                 &trans
&trans  &trans    &trans       &trans    &trans      &trans         &trans  &trans     &trans            &trans             &trans                &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
